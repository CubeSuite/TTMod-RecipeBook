// Code in this file has been generated by Equinox's ImageCodeGenerator
// Use Ctrl+E,D to format document

using System.Collections.Generic;
using EquinoxsModUtils;
using UnityEngine;

namespace RecipeBook
{
    internal static class Images {
        internal static bool initialised = false;

        internal static void InitialiseStyles() {
            // ToDo: Copy next line to OnGUI()
            // if (!Images.initialised) Images.InitialiseStyles();
            initialised = true;
            foreach (ModImage image in modImages) {
                image.InitialiseStyle();
            }
        }

        internal static ModImage oneToOne = new ModImage("OneToOne.png", 366, 122);
internal static ModImage oneToThree = new ModImage("OneToThree.png", 366, 274);
internal static ModImage oneToTwo = new ModImage("OneToTwo.png", 366, 198);
internal static ModImage threeToOne = new ModImage("ThreeToOne.png", 366, 274);
internal static ModImage threeToThree = new ModImage("ThreeToThree.png", 366, 274);
internal static ModImage threeToTwo = new ModImage("ThreeToTwo.png", 366, 274);
internal static ModImage twoToOne = new ModImage("TwoToOne.png", 366, 198);
internal static ModImage twoToThree = new ModImage("TwoToThree.png", 366, 274);
internal static ModImage twoToTwo = new ModImage("TwoToTwo.png", 366, 198);

        private static List<ModImage> modImages = new List<ModImage>() {
            oneToOne,
			oneToThree,
			oneToTwo,
			threeToOne,
			threeToThree,
			threeToTwo,
			twoToOne,
			twoToThree,
			twoToTwo 
        };
    }

    internal class ModImage 
    {
        internal float width;
        internal float height;

        internal Texture2D texture2d;
        internal Sprite sprite;
        internal Rect rect;
        internal GUIStyle style;

        internal void InitialiseStyle() {
            style = new GUIStyle() { normal = { background = texture2d } };
        }

        internal void Draw(float xPos, float yPos) {
            rect.x = xPos;
            rect.y = yPos;
            UnityEngine.GUI.Box(rect, "", style);
        }

        internal void Draw(float xPos, float yPos, float _width, float _height) {
            rect = new Rect(xPos, yPos, _width, _height);
            UnityEngine.GUI.Box(rect, "", style);
        }

        internal bool DrawAsButton(float xPos, float yPos) {
            rect.x = xPos;
            rect.y = yPos;
            return UnityEngine.GUI.Button(rect, "", style);
        }

        internal bool DrawAsButton(float xPos, float yPos, float _width, float _height) {
            rect = new Rect(xPos, yPos, _width, _height);
            return UnityEngine.GUI.Button(rect, "", style);
        }

        internal ModImage(string path, float _width, float _height) {
            width = _width;
            height = _height;
            rect = new Rect(0, 0, width, height);

            string embeddedPath = $"{path}";
            texture2d = EMU.Images.LoadTexture2DFromFile(embeddedPath);
            sprite = EMU.Images.LoadSpriteFromFile(embeddedPath);
        }
    }
}